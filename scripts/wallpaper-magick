#!/usr/bin/env bash
set -e

help(){
echo "
generate wallpapers from graphics that don't fit or text

options:
o	output path
m	mode [portrait|landscape|terminal|terminal-corner|terminal-edge|terminal-edge-clip]

t	text to use (probably a single character)
i	input image path

f	font to use (probably one with weird glyphs)
g	geometry; WxH percent offset
s	image scale percent
a	color using image alpha
r	rotate degrees, or h or v for horizontal/vertical flip
n	no centertrim (to handle rare bugs in centertrim)
F	overwrite destination if exists
B	background color (defaults to upper left corner)
c	add chromatic aberration
"
}


# defaults
geoOffset="0x0"
offset="+0"
scale="0"
optBlur=0
optVerbose=0
optAlphaMask=0
rotateDegrees=0
defaultColor="grey24"
defaultIconColor="white"
defaultBg="black"
defaultLength="4000"
maxRes="4000x4000>^"
optForce=0
optNoCenterTrim=0
optChromaticAberration=0
bgColor=""

imageOutlinePath="$HOME/bin/image-outline"
centerTrimPath="$HOME/bin/centertrim"
chromaticAberrationPath="$HOME/bin/chromatically_aberrate"

while getopts ":t:f:i:o:g:s:m:r:bvhaFnB:c" opt
do
	case "${opt}" in
		i)
			inPath="${OPTARG}"
			;;
		t)
			text="${OPTARG}"
			;;
		f)
			font="${OPTARG}"
			;;
		o)
			outPath="${OPTARG}"
			;;
		g)
			geoOffset="${OPTARG}"
			;;
		s)
			scale="${OPTARG}"
			;;
		m)
			mode="${OPTARG,,}"
			;;
		b)
			optBlur=1
			;;
		v)
			optVerbose=1
			;;
		a)
			optAlphaMask=1
			;;
		r)
			rotateDegrees="${OPTARG,,}"
			;;
		h)
			help
			exit 0
			;;
		F)
			optForce=1
			;;
		n)
			optNoCenterTrim=1
			;;
		B)
			bgColor="${OPTARG,,}"
			;;
		c)
			optChromaticAberration=1
			;;
		\?)
			echo "invalid option: $name"
			exit 1
			;;
		*)
			if [[ -n "$name" ]]
			then
				echo "not sure what happened here: $name"
				exit 1
			fi
			;;
	esac
done

if [[ -z "$mode" ]]
then
	echo "need a mode (-m)"
	exit 1
elif [[ -z "$outPath" ]]
then
	echo "need an output path (-o)"
	exit 1
elif [[ -z "$inPath" && -z "$text" ]]
then
	echo "need a source (-i or -t)"
	exit 1
elif [[ -n "$inPath" && ! -f "$inPath" ]]
then
	echo "input path does not exist:"
	echo "$inPath"
	exit 1
elif [[ -f "$outPath" && "$optForce" == 0 ]]
then
	echo "$(basename "$outPath") already exists"
	exit 0
fi

if [[ "$geoOffset" != *"x"* ]]
then
	geoOffset="${geoOffset}x${geoOffset}"
	# echo "adjusting geoOffset: $geoOffset"
fi

if [[ "$mode" == "icon" ]]
then
	defaultColor="$defaultIconColor"
fi

inPathExt="${inPath##*.}"
inPathExt="${inPathExt,,}"
outPathExt="${outPath##*.}"
outPathExt="${outPathExt,,}"
outPathNoExt="${outPath%.*}"
tempDir="$(dirname "$(mktemp -u)")"
inPathTemp="$tempDir/wallpaper-magick-$(basename "$outPath")"
inPathTemp="$(echo "$inPathTemp" | sed 's/ /-/g')"

# this check needs to be high up so needless file operations aren't done
if [[ -z "$bgColor" && "$mode" == *"terminal"* ]]
then
	# bgColor="$defaultBg"

	thisScript="$0"

	# if no background is given for a terminal wallpaper
	# then spin up three different presets
	"$thisScript" -B "$defaultBg" "$@" -o "${outPathNoExt}_$defaultBg.$outPathExt"
	"$thisScript" -B "none" "$@" -o "${outPathNoExt}_alpha.$outPathExt"
	"$thisScript" -B "none" -c "$@" -o "${outPathNoExt}_chromab.$outPathExt"
	exit

fi


if [[ "$inPathExt" == "svg" ]]
then
	rsvg-convert --keep-aspect-ratio --background-color transparent --width "$defaultLength" --format png --output "$inPathTemp" -- "$inPath" 
elif [[ "$inPathExt" == "eps" ]]
then
	convert "$inPath" -size "x${defaultLength}" -stroke "$defaultColor" -background none "PNG64:$inPathTemp"
# copy input image to a temp file so we can modify it freely
elif [[ -n "$inPath" ]]
then
	cp "$inPath" "$inPathTemp"
# if -t is supplied
# then generate a new source image from text
# after this, text handling is the same as input image handling
elif [[ -n "$text" ]]
then
	textRes="${defaultLength}x${defaultLength}"	

	# render text to temp path
	convert -background none -size "${textRes}" -gravity center -fill "$defaultColor" -font "$font" caption:"$text" "PNG64:$inPathTemp"
fi

# would love to trim the source image, however this will decenter it in many cases
# need to use a custom centering trim
# https://github.com/ImageMagick/ImageMagick/discussions/5877

# thanks Fred
# https://www.fmwconcepts.com/imagemagick/centertrim/index.php
if [[ -f "$centerTrimPath" && "$optNoCenterTrim" == 0 ]]
then
	"$centerTrimPath" "$inPathTemp" "$inPathTemp"
fi

if [[ "$rotateDegrees" -gt 0 ]]
then
	convert "$inPathTemp" -background none -rotate "$rotateDegrees" "PNG64:$inPathTemp"
elif [[ "$rotateDegrees" == "h" ]]
then
	convert "$inPathTemp" -flop "PNG64:$inPathTemp"
elif [[ "$rotateDegrees" == "v" ]]
then
	convert "$inPathTemp" -flip "PNG64:$inPathTemp"
fi

# echo -n "line $LINENO: " && identify -format '%wx%h\n' "$inPathTemp"

if [[ -z "$bgColor" ]]
then
	bgColorOriginal="$(convert "$inPathTemp" -format "%[pixel:p{0,0}]" info:)"
	bgColor="$bgColorOriginal"
fi

colorProfile="$(identify -format '%r' "$inPathTemp")"
width="$(identify -format '%w' "$inPathTemp")"
height="$(identify -format '%h' "$inPathTemp")"

if [[ "$optAlphaMask" == 1 ]]
then
	# TODO check that the image type supports transparency
	# https://superuser.com/questions/718755/transfer-transparency-from-one-image-to-another-using-imagemagick
	convert \( -size "${width}x${height}" "xc:$defaultColor" \) "$inPathTemp" -compose CopyOpacity -composite "PNG64:$inPathTemp"
fi

if [[ "$optChromaticAberration" == 1 ]]
then
	if [[ "$optVerbose" == 1 ]]
	then
		verboseArg="--verbose"
	else
		verboseArg=""
	fi

	# testing only
	# verboseArg="--verbose"

	"$chromaticAberrationPath" "$inPathTemp" "$inPathTemp"	"$verboseArg"
fi

if [[ "$mode" == "landscape" ]]
then
	aspectRatio="16/9"
	gravity="center"
	targetHeight="$height"
	targetWidth=$(echo "${targetHeight}*(${aspectRatio})" | bc -l)
	targetWidth="${targetWidth%%.*}"
elif [[ "$mode" == "portrait" ]]
then
	# TODO why is this backwards
	aspectRatio="20/9"
	gravity="center"
	targetWidth="$width"
	targetHeight=$(echo "$targetWidth*($aspectRatio)" | bc -l)

	gravity="center"
	targetHeight="${targetHeight%%.*}"
elif [[ "$mode" == "terminal"* ]]
then
	aspectRatio="16/9"

	if [[ "$mode" == "terminal-corner" ]]
	then
		gravity="southeast"
		termResRatio="1.8"

		widthOffsetInputPerc="0"
		heightOffsetInputPerc="0"
		widthOffsetOutputPerc="0.05"
		heightOffsetOutputPerc="0.05"
	elif [[ "$mode" == "terminal-edge" ]]
	then
		gravity="east"
		termResRatio="1.1"
		widthOffsetInputPerc="0"
		heightOffsetInputPerc="0"

		widthOffsetOutputPerc="0.05"
		heightOffsetOutputPerc="0"
	elif [[ "$mode" == "terminal-edge-clip" ]]
	then
		gravity="east"
		termResRatio="1.1"
		widthOffsetInputPerc="-0.5"
		heightOffsetInputPerc="0"

		widthOffsetOutputPerc="0"
		heightOffsetOutputPerc="0"
	else
		gravity="southeast"
		termResRatio=0.625
		widthOffsetInputPerc="-0.5"
		heightOffsetInputPerc="-0.5"
	fi
	termResRatio="$(echo "$termResRatio + $scale" | bc -l)"

	targetHeight="$(echo "${height} * ${termResRatio}" | bc -l)"
	targetWidth=$(echo "${targetHeight}*(${aspectRatio})" | bc -l)

	if [[ -z "$widthOffsetOutputPerc" ]]
	then
		widthOffsetOutputPerc=0
	fi

	if [[ -z "$heightOffsetOutputPerc" ]]
	then
		heightOffsetOutputPerc=0
	fi

	widthOffsetOpt="${geoOffset%%x*}"
	heightOffsetOpt="${geoOffset##*x}"
	widthOffsetOutputPerc="$(echo "$widthOffsetOutputPerc + $widthOffsetOpt" | bc -l)"
	heightOffsetOutputPerc="$(echo "$heightOffsetOutputPerc + $heightOffsetOpt" | bc -l)"
	widthOffsetInputPercMaterialized="$(echo "${width} * ${widthOffsetInputPerc}" | bc -l)"
	heightOffsetInputPercMaterialized="$(echo "${height} * ${heightOffsetInputPerc}" | bc -l)"
	# intentionally using targetHeight to calc width offset to provide symmetric results
	widthOffsetOutputPercMaterialized="$(echo "${targetHeight} * ${widthOffsetOutputPerc}" | bc -l)"
	heightOffsetOutputPercMaterialized="$(echo "${targetHeight} * ${heightOffsetOutputPerc}" | bc -l)"

	offset="+$(echo "${widthOffsetInputPercMaterialized} + ${widthOffsetOutputPercMaterialized}" | bc -l)+$(echo "${heightOffsetInputPercMaterialized} + ${heightOffsetOutputPercMaterialized}" | bc -l)"
elif [[ "$mode" == "icon" ]]
then
	gravity="center"
	# image-outline adds 3px on each side, so shooting for a final 256
	# TODO make this more resilient to change
	targetWidth="250"
	targetHeight="250"
	convert "$inPathTemp" -resize "${targetWidth}x${targetHeight}" "$inPathTemp"
else
	echo "unrecognized mode: $mode"
	exit 1
fi

targetDimensions="${targetWidth}x${targetHeight}"
blurOutPath="${outPath%.*}_blur.${outPath##*.}"
bgOutPath="${outPath%.*}_background.${outPath##*.}"

# offset="+0+0"
if [[ "$optVerbose" == 1 ]]
then
	echo "   file: $(basename "$inPathTemp")"
	echo "textRes: $textRes"
	echo "termResRatio: $termResRatio"
	echo "widthOffsetInputPerc: $widthOffsetInputPerc"
	echo "heightOffsetInputPerc: $heightOffsetInputPerc"
	echo "widthOffsetInputPercMaterialized: $widthOffsetInputPercMaterialized"
	echo "heightOffsetInputPercMaterialized: $heightOffsetInputPercMaterialized"
	echo "widthOffsetOutputPerc: $widthOffsetOutputPerc"
	echo "heightOffsetOutputPerc: $heightOffsetOutputPerc"
	echo "widthOffsetOutputPercMaterialized: $widthOffsetOutputPercMaterialized"
	echo "heightOffsetOutputPercMaterialized: $heightOffsetOutputPercMaterialized"
	echo " offset: $offset"
	echo " colors: $colorProfile"
	echo "bgColor: $bgColor"
	if [[ -n "$bgColorOriginal" ]]
	then
		echo "og bgC : $bgColorOriginal"
	fi
	echo "   mode: $mode"
	echo "  input: ${width}x${height}"
	echo " output: $targetDimensions"

	currentRes="$(identify -format '%wx%h' "$inPathTemp")"
	if [[ "$currentRes" != "${width}x${height}" ]]
	then
		echo "inPathTemp changed from ${width}x${height} to $currentRes"
	fi
fi

convert -background none -size "$targetDimensions" "xc:$bgColor" "PNG64:${bgOutPath}"

rm -f "$outPath"

if [[ "$optBlur" == 1 ]]
then
	convert "$inPathTemp" -background none -resize 250% -blur 0x25 -modulate 30 -gravity "$gravity" "PNG64:$blurOutPath"

	# final output
	convert -background none -gravity "$gravity" "$bgOutPath" "$blurOutPath" -geometry "${offset}" -composite "$inPathTemp" -geometry "${offset}" -composite -extent "$targetDimensions" -resize "$maxRes" "PNG64:$outPath"

else
	# final output
	convert -gravity "$gravity" "$bgOutPath" "$inPathTemp" -geometry "${offset}" -composite -resize "$maxRes" "PNG64:$outPath"
fi 

if [[ "$mode" == "icon" && -f "$imageOutlinePath" ]]
then
	"$imageOutlinePath" "$outPath" "$outPath"
fi

colorProfileOut="$(identify -format '%r' "$outPath")"
if [[ "$optVerbose" == 1 ]]
then
	echo " colors: $colorProfileOut"
fi

# # for testing only
# if [[ -n "$text" ]]
# then
# 	cp "$inPathTemp" "$(dirname "$outPath")/tmp_$(basename "$inPathTemp")"
# fi

rm -f "$bgOutPath"
rm -f "$blurOutPath"
rm -f "$inPathTemp"

if [[ "${colorProfile,,}" != *"gray"* && "${colorProfileOut,,}" == *"gray"* && "$outPathExt" != "png" ]]
then
	echo "image magick grayscale bug detected!"
	echo "changing your output to a png should fix this"
	# exit 1
fi

# echo "-------------"
# # ascii-image-converter "$outPath" --height "$(($(tput lines)-5))"
# ascii-image-converter "$outPath" --color --full
# echo "-------------"
# identify -format "%wx%h\n" "$outPath"
basename "$outPath"

